syntax = "proto3";

package regen.data.v1;

import "cosmos/msg/v1/msg.proto";
import "regen/data/v1/types.proto";

// MsgAnchor is the Msg/Anchor request type.
message MsgAnchor {
  option (cosmos.msg.v1.signer) = "sender";

  // sender is the address of the sender of the transaction. The sender in
  // Anchor is not attesting to the veracity of the underlying data. They
  // can simply be an intermediary providing services.
  string sender = 1;

  // content_hash is the content hash for the data to anchor.
  ContentHash content_hash = 2;
}

// MsgAttest is the Msg/Attest request type.
message MsgAttest {
  option (cosmos.msg.v1.signer) = "attestor";

  // attestor is the addresses of the account attesting to the veracity of the
  // data. By making an Attest request, the attestor is attesting to the
  // veracity of the data referenced by the IRI. The precise meaning of this may
  // vary depending on the underlying data.
  string attestor = 1;

  // content_hashes are the content hashes for anchored data. Only RDF graph
  // data can be signed as its data model is intended to specifically convey
  // semantic meaning.
  repeated ContentHash.Graph content_hashes = 2;
}

// MsgDefineResolver is the Msg/DefineResolver request type.
message MsgDefineResolver {
  option (cosmos.msg.v1.signer) = "manager";

  // manager is the address of the resolver manager. The manager is able
  // to make future calls using the ID returned by this operation with
  // Msg/RegisterResolver. To authorize other accounts to register resolvers,
  // the manager should make use of cosmos.authz.
  string manager = 1;

  // resolver_url is a resolver URL which should refer to an HTTP service
  // which will respond to a GET request with the IRI of a ContentHash
  // and return the content if it exists or a 404. For graph data, resolvers
  // should use the HTTP Accept header to negotiate the RDF serialization
  // format.
  string resolver_url = 2;
}

// MsgRegisterResolver is the Msg/RegisterResolver request type.
message MsgRegisterResolver {
  option (cosmos.msg.v1.signer) = "manager";

  // manager is the address of the resolver manager who registered this
  // resolver with Msg/DefinedResolver.
  string manager = 1;

  // resolver_id is the ID of a resolver defined with Msg/DefineResolver.
  uint64 resolver_id = 2;

  // content_hashes is a list of content hashes which the resolver claims to
  // serve.
  repeated ContentHash content_hashes = 3;
}
