syntax = "proto3";

package cosmos.group.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

// MemberRequest represents a group member to be used in Msg server requests.
// Contrary to `Member`, it doesn't have any `added_at` field
// since this field cannot be set as part of requests.
message MemberRequest {

  // address is the member's account address.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // weight is the member's voting weight that should be greater than 0.
  string weight = 2;

  // metadata is any arbitrary metadata attached to the member.
  string metadata = 3;
}

// ThresholdDecisionPolicy is a decision policy where a proposal passes when it
// satisfies the two following conditions:
// 1. The sum of all `YES` voters' weights is greater or equal than the defined
//    `threshold`.
// 2. The voting and execution periods of the proposal respect the parameters
//    given by `windows`.
message ThresholdDecisionPolicy {
  option (cosmos_proto.implements_interface) = "DecisionPolicy";
  option (amino.name)                        = "cosmos-sdk/ThresholdDecisionPolicy";

  // threshold is the minimum weighted sum of `YES` votes that must be met or
  // exceeded for a proposal to succeed.
  string threshold = 1;

  // windows defines the different windows for voting and execution.
  DecisionPolicyWindows windows = 2;
}

// PercentageDecisionPolicy is a decision policy where a proposal passes when
// it satisfies the two following conditions:
// 1. The percentage of all `YES` voters' weights out of the total group weight
//    is greater or equal than the given `percentage`.
// 2. The voting and execution periods of the proposal respect the parameters
//    given by `windows`.
message PercentageDecisionPolicy {
  option (cosmos_proto.implements_interface) = "DecisionPolicy";
  option (amino.name)                        = "cosmos-sdk/PercentageDecisionPolicy";

  // percentage is the minimum percentage the weighted sum of `YES` votes must
  // meet for a proposal to succeed.
  string percentage = 1;

  // windows defines the different windows for voting and execution.
  DecisionPolicyWindows windows = 2;
}

// DecisionPolicyWindows defines the different windows for voting and execution.
message DecisionPolicyWindows {
  // voting_period is the duration from submission of a proposal to the end of voting period
  // Within this times votes can be submitted with MsgVote.
  google.protobuf.Duration voting_period = 1
      [(gogoproto.stdduration) = true, (gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // min_execution_period is the minimum duration after the proposal submission
  // where members can start sending MsgExec. This means that the window for
  // sending a MsgExec transaction is:
  // `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
  // where max_execution_period is a app-specific config, defined in the keeper.
  // If not set, min_execution_period will default to 0.
  //
  // Please make sure to set a `min_execution_period` that is smaller than
  // `voting_period + max_execution_period`, or else the above execution window
  // is empty, meaning that all proposals created with this decision policy
  // won't be able to be executed.
  google.protobuf.Duration min_execution_period = 2
      [(gogoproto.stdduration) = true, (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// VoteOption enumerates the valid vote options for a given proposal.
enum VoteOption {
  option (gogoproto.goproto_enum_prefix) = false;

  // VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will
  // return an error.
  VOTE_OPTION_UNSPECIFIED = 0;
  // VOTE_OPTION_YES defines a yes vote option.
  VOTE_OPTION_YES = 1;
  // VOTE_OPTION_ABSTAIN defines an abstain vote option.
  VOTE_OPTION_ABSTAIN = 2;
  // VOTE_OPTION_NO defines a no vote option.
  VOTE_OPTION_NO = 3;
  // VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  VOTE_OPTION_NO_WITH_VETO = 4;
}

// Exec defines modes of execution of a proposal on creation or on new vote.
enum Exec {

  // An empty value means that there should be a separate
  // MsgExec request for the proposal to execute.
  EXEC_UNSPECIFIED = 0;

  // Try to execute the proposal immediately.
  // If the proposal is not allowed per the DecisionPolicy,
  // the proposal will still be open and could
  // be executed at a later point.
  EXEC_TRY = 1;
}
